# -*- coding: utf-8 -*-
"""Iris Flower Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lo3Ttgjku-GKET1SOBi1dpSqdp-MzCJj

##Importing Libraries
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno
import warnings
warnings.filterwarnings('ignore')

"""##Data Reading & Manipulating"""

df = pd.read_csv('/content/Task.csv')
df

df.drop(['Id'], axis=1, inplace=True)

df.head()

df.info()

df.describe()

df['Species'].value_counts()

df.isna().sum()

df.duplicated().sum()

df = df.drop_duplicates()

df.duplicated().sum()

"""## Data Visaulization"""

df.hist();

sns.pairplot(df, hue='Species')

corr = df.corr()
corr

fig, ax = plt.subplots(figsize = (11,5))
sns.heatmap(corr, annot=True, ax=ax)

"""##Machine Learning Algorithmn"""

from sklearn.model_selection import train_test_split

X = df.drop(['Species'], axis=1)
y = df['Species']

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.35, random_state=3332)



"""#1) K - Means Model"""

#KNN Model training
from sklearn.neighbors import KNeighborsClassifier
model_1 = KNeighborsClassifier()

#model Training
model_1.fit(x_train, y_train)

#print matrix to get performance
print('Accuracy: ',model_1.score(x_test, y_test) * 100)

prediction_1 = model_1.predict(x_test)
print(prediction_1)

Actual_1 = y_test
print(Actual_1)

# Adetailed classification Report Linear RegressionM
from sklearn.metrics import classification_report
print(classification_report(Actual_1, prediction_1))

"""##2) Decision Tree Model

"""

#Decision Tree Model
from sklearn.tree import DecisionTreeClassifier
model_2 = DecisionTreeClassifier()

#Model Training
model_2.fit(x_train, y_train)

#print matrix to get performance
print('Accuracy: ',model_2.score(x_test, y_test) * 100)

prediction_2 = model_2.predict(x_test)
print(prediction_2)

Actual_2 = y_test
print(Actual_2)

# Adetailed classification Report Linear RegressionM
from sklearn.metrics import classification_report
print(classification_report(Actual_2, prediction_2))

"""##3) Support Vector Machine Model"""

#Support Vector Machine Model
from sklearn.svm import SVC
model_3 = SVC()

#Model Training
model_3.fit(x_train, y_train)

#print matrix to get performance
print('Accuracy: ',model_3.score(x_test, y_test) * 100)

prediction_3 = model_3.predict(x_test)
print(prediction_3)

Actual_3 = y_test
print(Actual_3)

# Adetailed classification Report VSM Model
from sklearn.metrics import classification_report
print(classification_report(Actual_3, prediction_3))

"""##4) Random Forest Model"""

#Random Forest Machine Model
from sklearn.ensemble import RandomForestClassifier
model_4 = RandomForestClassifier()

#Model Training
model_4.fit(x_train, y_train)

#print matrix to get performance
print('Accuracy: ',model_4.score(x_test, y_test) * 100)

prediction_4 = model_4.predict(x_test)
print(prediction_4)

Actual_4 = y_test
print(Actual_4)

# Adetailed classification Report VSM Model
from sklearn.metrics import classification_report
print(classification_report(Actual_4, prediction_4))

"""##Results"""

import plotly.graph_objects as pgo

Result = pd.DataFrame({'Models':['KNN', 'DT', 'SVM', 'RF'],
             'Accuracy':[model_1.score(x_test, y_test) * 100, model_2.score(x_test, y_test) * 100,
                        model_3.score(x_test, y_test) * 100, model_4.score(x_test, y_test) * 100]})

Result

Model = Result['Models']

Accuracy = Result['Accuracy']

fig = pgo.Figure()
fig.add_trace(pgo.Bar(x = Model, y = Accuracy, name = 'Accuracy', width = 0.3))

fig.update_layout(title = 'Accuracy score of performed Models in %.')

fig.show()

"""##Model Testing"""

X_new = np.array([[9, 8, 3, 4], [15, 56, 16, 23], [784, 235, 498, 123]])
#Prediction of the Species from the input vector
prediction = model_1.predict(X_new)
print("Prediction of species: {}".format(prediction))

X_new = np.array([[0.9, 0.8, 0.3, 0.4], [0.49, 0.56, 0.16, 0.23], [0.357, 0.236, 0.498, 0.561]])
#Prediction of the Species from the input vector
prediction = model_1.predict(X_new)
print("Prediction of species: {}".format(prediction))