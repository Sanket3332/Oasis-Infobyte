# -*- coding: utf-8 -*-
"""Sales Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zc4dNIVHW5i97EjheME5vWr_YgHGlO5Z
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import catboost
from sklearn.preprocessing import LabelEncoder
from sklearn import metrics

import warnings
warnings.filterwarnings('ignore')

Sales = pd.read_csv('/content/Task  Dataset.csv')
Sales.head()

Sales = Sales.loc[:, ~Sales.columns.str.contains('^Unnamed')]

Sales.head()

Sales.info()

Sales.describe()

Sales.isnull().sum()

Sales.duplicated().sum()

sns.boxplot(Sales);

sns.pairplot(Sales);

sns.barplot(Sales);

Sales.hist();

sns.distplot(Sales);

corr = Sales.corr()
corr

fig, ax = plt.subplots(figsize = (11,5))
sns.heatmap(corr, annot=True, ax=ax)

X = Sales.drop(['Sales'], axis=1)
y = Sales['Sales']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, random_state=3332)

from catboost import CatBoostRegressor

CBR = CatBoostRegressor()

CBR.fit(X_train, y_train)

Accuracy_1 = CBR.score(X_test, y_test)*100
print('Accuracy of model is:', Accuracy_1)

Prediction_1 = CBR.predict(X_test)
print(Prediction_1)

Actual_1 = (y_test)
print(Actual_1)

from sklearn.metrics import mean_absolute_percentage_error
print('Error in model is :', mean_absolute_percentage_error(Actual_1, Prediction_1)*100)



from xgboost import XGBRegressor

XGB = XGBRegressor()

XGB.fit(X_train, y_train)

Accuracy_2 = XGB.score(X_test, y_test)*100
print('Accuracy of model is:', Accuracy_2)

Prediction_2 = XGB.predict(X_test)
print(Prediction_2)

Actual_2 = (y_test)
print(Actual_2)

from sklearn.metrics import mean_absolute_percentage_error
print('Error in model is :', mean_absolute_percentage_error(Actual_2, Prediction_2)*100)



from sklearn.ensemble import RandomForestRegressor

RF = RandomForestRegressor()

RF.fit(X_train, y_train)

Accuracy_3 = RF.score(X_test, y_test)*100
print('Accuracy of model is:', Accuracy_3)

Prediction_3 = RF.predict(X_test)
print(Prediction_3)

Actual_3 = (y_test)
print(Actual_3)

from sklearn.metrics import mean_absolute_percentage_error
print('Error in model is :', mean_absolute_percentage_error(Actual_3, Prediction_3)*100)



Result = pd.DataFrame({'Model' : ['CBR', 'XGB', 'RF'],
                       'Accuracy' : [Accuracy_1, Accuracy_2, Accuracy_3],
                       'Error' : [(mean_absolute_percentage_error(Actual_1, Prediction_1)*100), (mean_absolute_percentage_error(Actual_2, Prediction_2)*100), (mean_absolute_percentage_error(Actual_3, Prediction_3)*100)]})

Result

fig = plt.figure(figsize = (5, 5))

bars = plt.bar(Result['Model'], Result['Accuracy'],  width=0.4)
plt.xlabel('Models')
plt.ylabel('Accuracy in %')
plt.title('Performed models & their Aaccuracy')
plt.show()

fig = plt.figure(figsize = (5, 5))

bars = plt.bar(Result['Model'], Result['Error'],  width=0.4)
bars[1].set_color('black')
plt.xlabel('Models')
plt.ylabel('Error in %')
plt.title('Performed models & their Errors')
plt.show()

X_new = np.array([[254, 45, 10]])
#Prediction of the Species from the input vector
prediction = XGB.predict(X_new)
print("Sales: {}".format(prediction))

